lock: std::atomic_flag = ATOMIC_FLAG_INIT;
out: int = 0;

f: (n: int) = {
    cnt: int = 0;
    do {
        while lock.test_and_set(std::memory_order_acquire) { // acquire lock
            while lock.test(std::memory_order_relaxed) // test lock
                {} // spin
        }
        ch: char = ();
        if out++ % 40 == 0 { ch = '\n'; } else { ch = ' '; }
        std::cout << n << ch;
        lock.clear(std::memory_order_release); // release lock
    } next cnt++ while cnt < 40;
}

main: () = {
    v: std::vector<std::thread> = ();
    n: int = 0;
    do {
        v.emplace_back(f, n);
    } next n++ while n < 10;
        
    for v do (inout t)
        t.join();
}