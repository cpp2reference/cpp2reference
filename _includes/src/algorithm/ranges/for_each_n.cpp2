P: @struct type = {
    first:  int  = 0;
    second: char = '\0';
    operator<<: (inout os: std::ostream, p: P) -> forward std::ostream = {
        os << '{' << p.first << ",'" << p.second << "'}";
        return os;
    }
}

print: (name: std::string_view, v) = {
    std::cout << "(name)$: ";
    (copy n:= v.ssize())
    for v do (e) {
        std::cout << e;
        n--;
        if n > 0 {
            std::cout << ", ";
        }
        else {
            std::cout << "\n";
        }
    }
}

main: () = {
    a: std::array = (1, 2, 3, 4, 5);
    print("a", a);

    // Negate first three numbers:
    std::ranges::for_each_n(a.begin(), 3, :(inout n) = n *= -1);
    print("a", a);
 
    s: std::array = (:P=(1,'a'), :P=(2, 'b'), :P=(3, 'c'), :P=(4, 'd') );
    print("s", s);

    // Negate data members 'P::first' using projection:
    std::ranges::for_each_n(s.begin(), 2, :(inout x) = x *= -1, P::first&);
    print("s", s);

    // Capitalize data members 'P::second' using projection:
    std::ranges::for_each_n(s.begin(), 3, :(inout c) = c -= 'a'-'A', P::second&);
    print("s", s);
}